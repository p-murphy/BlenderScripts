Function InsertNewMesh([string]$name)
{
    # Strip file extension. We only need the file name itself to insert into class boilerplate.
    $ClassName = $name -replace (".txt", "")

    # Format the file name into all lowercase, and only first char uppercase ("Titlecase")
    $LowerCase = $className.ToLower()
    $TitleCase = (Get-Culture).TextInfo.ToTitleCase($LowerCase)

    # Grab boilerplate
    $ClassTemplate = [IO.File]::ReadAllText($PSScriptRoot + "\class.txt")

    # Replace appropriate locations with lower and title cases
    $ClassTemplate = $ClassTemplate.Replace("TITLE", $TitleCase)
    $ClassTemplate = $ClassTemplate.Replace("LOWER", $LowerCase)

    # Grab raw vertex and polygon data, generated by Blender Python script
    $ClassData = [IO.File]::ReadAllText($PSScriptRoot + "\" + $name)

    # Separate data into 2 strings, place in array
    $vertsAndPolygons = $ClassData.Split("[]")

    # Reformat the 2 strings so they are bookended with array brackets
    $verts = "[" + $vertsAndPolygons[1] + "]"
    $polygons = "[" + $vertsAndPolygons[3] + "]"

    # Place into file in appropriate locations
    $ClassTemplate = $ClassTemplate.Replace("verts =", "verts = " + $verts)
    $ClassTemplate = $ClassTemplate.Replace("polygons =", "polygons = " + $polygons)

    # Grab main Add-On contents
    $CustomMeshPy = [IO.File]::ReadAllText($PSScriptRoot + "\add_custom_mesh.py")

    # Insert class
    $CustomMeshPy = $CustomMeshPy.Replace("#ENDOPERATORS", $ClassTemplate + "`n`n#ENDOPERATORS")

    # Construct operator string for draw
    $DrawString = 'layout.operator("mesh.primitive_' + $LowerCase + '_add", text = "Add ' + $TitleCase + '")'

    # Insert operator string in draw
    $CustomMeshPy = $CustomMeshPy.Replace("#ENDDRAW", $DrawString + "`n`t`t#ENDDRAW")

    # Write final updates to Add On file
    $customMeshPy | Out-File ($PSScriptRoot + "\add_custom_mesh.py") -Encoding ascii
}